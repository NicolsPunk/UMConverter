#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
Universal installer for media converter
"""

import os
import sys
import subprocess
import platform
import zipfile
import requests
from pathlib import Path
import logging
import json
import locale

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Localization:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.current_lang = self._detect_language()
        self.translations = {
            'ru': {
                'title': 'üé¨ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤',
                'checking_python': 'üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...',
                'python_version_error': '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ',
                'python_found': '‚úÖ Python {} –Ω–∞–π–¥–µ–Ω',
                'installing_deps': 'üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...',
                'deps_install_error': '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {}',
                'deps_installed': '‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
                'ffmpeg_setup': 'üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FFmpeg...',
                'ffmpeg_found_system': '‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
                'ffmpeg_found_local': '‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ FFmpeg –Ω–∞–π–¥–µ–Ω–∞: {}',
                'ffmpeg_not_found': '‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'ffmpeg_options': '–í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:',
                'ffmpeg_option1': '1. –°–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH',
                'ffmpeg_option2': '2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
                'ffmpeg_option3': '3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã',
                'downloading_ffmpeg': 'üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg...',
                'ffmpeg_download_error': '‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {}',
                'ffmpeg_downloaded': '‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                'extracting_ffmpeg': 'üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ FFmpeg...',
                'ffmpeg_extract_error': '‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {}',
                'ffmpeg_extracted': '‚úÖ FFmpeg —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {}',
                'temp_file_deleted': 'üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω',
                'creating_wrapper': 'üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞-–æ–±–µ—Ä—Ç–∫–∏...',
                'wrapper_created': '‚úÖ –°–∫—Ä–∏–ø—Ç-–æ–±–µ—Ä—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω: {}',
                'testing_ffmpeg': 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg...',
                'ffmpeg_test_error': '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {}',
                'ffmpeg_works': '‚úÖ FFmpeg —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'creating_samples': 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤...',
                'samples_created': '‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã',
                'creating_launchers': 'üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...',
                'launchers_created': '‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã',
                'setup_complete': 'üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                'next_steps': 'üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:',
                'next_step1': '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ GUI: python gui_converter.py',
                'next_step2': '2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI: python convert_media.py --help',
                'next_step3': '3. –ï—Å–ª–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤',
                'setup_success': '‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!',
                'setup_error': '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞',
                'check_logs': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
                'windows_only': '‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows',
                'use_build_script': 'üí° –î–ª—è Linux/macOS –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python build_ffmpeg.py',
                'ffmpeg_installed': 'üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!',
                'ffmpeg_path': 'üìÅ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {}',
                'use_wrapper': 'üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ffmpeg.bat –¥–ª—è –∑–∞–ø—É—Å–∫–∞',
                'download_success': '‚úÖ FFmpeg —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
                'download_error': '‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è FFmpeg',
                'progress': 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {:.1f}%',
                'file': 'üìÅ –§–∞–π–ª: {}',
                'bin_folder_error': '‚ùå –ü–∞–ø–∫–∞ bin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º FFmpeg',
                'ffmpeg_exe_not_found': '‚ùå ffmpeg.exe –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'ffmpeg_run_error': '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg: {}',
                'ffmpeg_folder_error': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å FFmpeg –≤ –∞—Ä—Ö–∏–≤–µ',
                'starting_setup': 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–µ–∫—Ç–∞...',
                'starting_download': 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg...',
                'system_check': 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...',
                'system_windows': '‚úÖ –°–∏—Å—Ç–µ–º–∞: Windows',
                'system_linux': '‚úÖ –°–∏—Å—Ç–µ–º–∞: Linux',
                'system_macos': '‚úÖ –°–∏—Å—Ç–µ–º–∞: macOS',
                'language_detected': 'üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {}',
                'language_manual': 'üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–∑—ã–∫: {}',
                'language_prompt': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language (ru/en): ',
                'invalid_language': '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π. / Invalid choice. Using Russian.',
                'manual_language': '–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ / Manual language selection',
                'auto_language': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ / Auto detection'
            },
            'en': {
                'title': 'üé¨ Media Converter Installer',
                'checking_python': 'üêç Checking Python version...',
                'python_version_error': '‚ùå Python 3.7 or higher required',
                'python_found': '‚úÖ Python {} found',
                'installing_deps': 'üì¶ Installing Python dependencies...',
                'deps_install_error': '‚ùå Error installing dependencies: {}',
                'deps_installed': '‚úÖ Dependencies installed successfully',
                'ffmpeg_setup': 'üé¨ Setting up FFmpeg...',
                'ffmpeg_found_system': '‚úÖ FFmpeg found in system',
                'ffmpeg_found_local': '‚úÖ Local FFmpeg build found: {}',
                'ffmpeg_not_found': '‚ö†Ô∏è FFmpeg not found',
                'ffmpeg_options': 'Installation options:',
                'ffmpeg_option1': '1. Download from https://ffmpeg.org/ and add to PATH',
                'ffmpeg_option2': '2. Automatic installation (recommended)',
                'ffmpeg_option3': '3. Use your system package manager',
                'downloading_ffmpeg': 'üì• Downloading FFmpeg...',
                'ffmpeg_download_error': '‚ùå Download error: {}',
                'ffmpeg_downloaded': '‚úÖ Download completed',
                'extracting_ffmpeg': 'üì¶ Extracting FFmpeg...',
                'ffmpeg_extract_error': '‚ùå Extraction error: {}',
                'ffmpeg_extracted': '‚úÖ FFmpeg extracted to {}',
                'temp_file_deleted': 'üóëÔ∏è Temporary file deleted',
                'creating_wrapper': 'üìù Creating wrapper script...',
                'wrapper_created': '‚úÖ Wrapper script created: {}',
                'testing_ffmpeg': 'üß™ Testing FFmpeg...',
                'ffmpeg_test_error': '‚ùå Testing error: {}',
                'ffmpeg_works': '‚úÖ FFmpeg works correctly',
                'creating_samples': 'üìù Creating sample files...',
                'samples_created': '‚úÖ Sample files created',
                'creating_launchers': 'üöÄ Creating launcher scripts...',
                'launchers_created': '‚úÖ Launcher scripts created',
                'setup_complete': 'üéâ Project setup completed!',
                'next_steps': 'üìã What\'s next:',
                'next_step1': '1. Run GUI: python gui_converter.py',
                'next_step2': '2. Or use CLI: python convert_media.py --help',
                'next_step3': '3. If FFmpeg not found, install it or build from source',
                'setup_success': '‚úÖ Project successfully configured!',
                'setup_error': '‚ùå Project setup error',
                'check_logs': 'Check logs above for additional information.',
                'windows_only': '‚ùå This script is for Windows only',
                'use_build_script': 'üí° For Linux/macOS use: python build_ffmpeg.py',
                'ffmpeg_installed': 'üéâ FFmpeg download completed successfully!',
                'ffmpeg_path': 'üìÅ FFmpeg installed in: {}',
                'use_wrapper': 'üîß Use ffmpeg.bat to run',
                'download_success': '‚úÖ FFmpeg successfully downloaded and installed!',
                'download_error': '‚ùå FFmpeg download error',
                'progress': 'üìä Progress: {:.1f}%',
                'file': 'üìÅ File: {}',
                'bin_folder_error': '‚ùå Bin folder not found in extracted FFmpeg',
                'ffmpeg_exe_not_found': '‚ùå ffmpeg.exe not found',
                'ffmpeg_run_error': '‚ùå FFmpeg run error: {}',
                'ffmpeg_folder_error': '‚ùå Could not find FFmpeg folder in archive',
                'starting_setup': 'üöÄ Starting project setup...',
                'starting_download': 'üöÄ Starting FFmpeg download...',
                'system_check': 'üîç Checking system...',
                'system_windows': '‚úÖ System: Windows',
                'system_linux': '‚úÖ System: Linux',
                'system_macos': '‚úÖ System: macOS',
                'language_detected': 'üåê Language detected: {}',
                'language_manual': 'üåê Language used: {}',
                'language_prompt': 'Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (ru/en): ',
                'invalid_language': 'Invalid choice. Using English. / –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.',
                'manual_language': 'Manual language selection / –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞',
                'auto_language': 'Auto detection / –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
            }
        }
    
    def _detect_language(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã
            system_lang = locale.getlocale()[0]
            if system_lang and system_lang.startswith('ru'):
                return 'ru'
            else:
                return 'en'
        except:
            return 'en'
    
    def get(self, key, *args):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        translation = self.translations.get(self.current_lang, self.translations['en']).get(key, key)
        if args:
            return translation.format(*args)
        return translation
    
    def set_language(self, lang):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
        if lang in self.translations:
            self.current_lang = lang
            return True
        return False
    
    def prompt_language(self):
        """–ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\n{self.get('manual_language')}")
        choice = input(self.get('language_prompt')).strip().lower()
        
        if choice in ['ru', '—Ä—É—Å', 'russian']:
            self.set_language('ru')
            print(f"{self.get('language_manual', 'Russian')}")
        elif choice in ['en', 'eng', 'english']:
            self.set_language('en')
            print(f"{self.get('language_manual', 'English')}")
        else:
            print(self.get('invalid_language'))
            self.set_language('ru' if self._detect_language() == 'ru' else 'en')

class UniversalInstaller:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫"""
    
    def __init__(self):
        self.project_dir = Path.cwd()
        self.system = platform.system().lower()
        self.loc = Localization()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if len(sys.argv) > 1 and sys.argv[1] in ['--lang', '-l']:
            if len(sys.argv) > 2:
                self.loc.set_language(sys.argv[2])
            else:
                self.loc.prompt_language()
        else:
            print(f"{self.loc.get('language_detected', self.loc.get('auto_language'))}")
        
        print(f"\n{self.loc.get('title')}")
        print("=" * 50)
    
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        logger.info(self.loc.get('checking_python'))
        
        if sys.version_info < (3, 7):
            logger.error(self.loc.get('python_version_error'))
            return False
        
        logger.info(self.loc.get('python_found', sys.version.split()[0]))
        return True
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info(self.loc.get('installing_deps'))
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º pip
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                         capture_output=True, check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                         capture_output=True, check=True)
            
            logger.info(self.loc.get('deps_installed'))
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(self.loc.get('deps_install_error', str(e)))
            return False
    
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg"""
        logger.info(self.loc.get('ffmpeg_setup'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg –≤ —Å–∏—Å—Ç–µ–º–µ
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                logger.info(self.loc.get('ffmpeg_found_system'))
                return True
        except FileNotFoundError:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
        local_ffmpeg_paths = [
            "bin/bin/ffmpeg.exe",
            "bin/bin/ffmpeg",
            "ffmpeg.bat",
            "ffmpeg.sh"
        ]
        
        for path in local_ffmpeg_paths:
            if Path(path).exists():
                logger.info(self.loc.get('ffmpeg_found_local', path))
                return True
        
        return False
    
    def download_ffmpeg(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg –¥–ª—è Windows"""
        if self.system != "windows":
            logger.info(self.loc.get('use_build_script'))
            return False
        
        try:
            logger.info(self.loc.get('downloading_ffmpeg'))
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            base_url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest"
            arch = "win64" if platform.machine().endswith('64') else "win32"
            filename = f"ffmpeg-master-latest-{arch}-gpl.zip"
            url = f"{base_url}/{filename}"
            
            logger.info(self.loc.get('file', filename))
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(filename, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
                        if total_size > 0:
                            progress = (downloaded / total_size) * 100
                            logger.info(self.loc.get('progress', progress))
            
            logger.info(self.loc.get('ffmpeg_downloaded'))
            return self.extract_ffmpeg(filename)
            
        except Exception as e:
            logger.error(self.loc.get('ffmpeg_download_error', str(e)))
            return False
    
    def extract_ffmpeg(self, zip_filename: str) -> bool:
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ FFmpeg"""
        try:
            logger.info(self.loc.get('extracting_ffmpeg'))
            
            bin_dir = Path("bin")
            bin_dir.mkdir(exist_ok=True)
            
            with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
                zip_ref.extractall(bin_dir)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É —Å FFmpeg
            ffmpeg_folders = list(bin_dir.glob("ffmpeg-*"))
            if ffmpeg_folders:
                ffmpeg_folder = ffmpeg_folders[0]
                ffmpeg_dir = bin_dir / "ffmpeg"
                ffmpeg_folder.rename(ffmpeg_dir)
                logger.info(self.loc.get('ffmpeg_extracted', ffmpeg_dir))
            else:
                logger.error(self.loc.get('ffmpeg_folder_error'))
                return False
            
            # –£–¥–∞–ª—è–µ–º zip —Ñ–∞–π–ª
            Path(zip_filename).unlink()
            logger.info(self.loc.get('temp_file_deleted'))
            
            return self.create_wrapper_script(ffmpeg_dir)
            
        except Exception as e:
            logger.error(self.loc.get('ffmpeg_extract_error', str(e)))
            return False
    
    def create_wrapper_script(self, ffmpeg_dir: Path) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞-–æ–±–µ—Ä—Ç–∫–∏"""
        logger.info(self.loc.get('creating_wrapper'))
        
        bin_path = ffmpeg_dir / "bin"
        if not bin_path.exists():
            logger.error(self.loc.get('bin_folder_error'))
            return False
        
        wrapper_content = f"""@echo off
set FFMPEG_PATH=%~dp0{ffmpeg_dir}\\bin
set PATH=%FFMPEG_PATH%;%PATH%
ffmpeg.exe %*
"""
        
        wrapper_path = Path("ffmpeg.bat")
        with open(wrapper_path, 'w', encoding='utf-8') as f:
            f.write(wrapper_content)
        
        logger.info(self.loc.get('wrapper_created', wrapper_path))
        return self.test_ffmpeg(ffmpeg_dir)
    
    def test_ffmpeg(self, ffmpeg_dir: Path) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg"""
        try:
            logger.info(self.loc.get('testing_ffmpeg'))
            
            ffmpeg_exe = ffmpeg_dir / "bin" / "ffmpeg.exe"
            if not ffmpeg_exe.exists():
                logger.error(self.loc.get('ffmpeg_exe_not_found'))
                return False
            
            result = subprocess.run([str(ffmpeg_exe), "-version"], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(self.loc.get('ffmpeg_works'))
                return True
            else:
                logger.error(self.loc.get('ffmpeg_run_error', result.stderr))
                return False
                
        except Exception as e:
            logger.error(self.loc.get('ffmpeg_test_error', str(e)))
            return False
    
    def create_sample_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        logger.info(self.loc.get('creating_samples'))
        
        examples_dir = Path("examples")
        examples_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        examples_readme = """# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ / Usage Examples

## –ó–∞–ø—É—Å–∫ GUI –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ / Run GUI converter
```bash
python gui_converter.py
```

## –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ / Run CLI converter
```bash
python convert_media.py "–ø–∞–ø–∫–∞_—Å_—Ñ–∞–π–ª–∞–º–∏" -o "–ø–∞–ø–∫–∞_–¥–ª—è_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" -q 80
```

## –°–±–æ—Ä–∫–∞ FFmpeg –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ / Build FFmpeg from source
```bash
python build_ffmpeg.py
```

## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã / Supported formats

### –í–∏–¥–µ–æ / Video
- –í—Ö–æ–¥–Ω—ã–µ / Input: MP4, AVI, MOV, MKV, WMV, FLV, WebM
- –í—ã—Ö–æ–¥–Ω—ã–µ / Output: MP4, WebM, AVI, MKV, MOV

### –ê—É–¥–∏–æ / Audio
- –í—Ö–æ–¥–Ω—ã–µ / Input: MP3, WAV, AAC, OGG, FLAC, M4A
- –í—ã—Ö–æ–¥–Ω—ã–µ / Output: MP3, WAV, AAC, OGG, OPUS

### –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è / Images
- –í—Ö–æ–¥–Ω—ã–µ / Input: JPG, PNG, BMP, TIFF, WebP
- –í—ã—Ö–æ–¥–Ω—ã–µ / Output: WebP, JPG, PNG
"""
        
        with open(examples_dir / "README.md", "w", encoding="utf-8") as f:
            f.write(examples_readme)
        
        # –°–æ–∑–¥–∞–µ–º .gitignore
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
conversion.log
gui_conversion.log

# Build artifacts
build/
bin/
ffmpeg.bat
ffmpeg.sh

# OS
.DS_Store
Thumbs.db

# Project specific
examples/output/
temp/
"""
        
        with open(".gitignore", "w", encoding="utf-8") as f:
            f.write(gitignore_content)
        
        logger.info(self.loc.get('samples_created'))
    
    def create_launcher_scripts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
        logger.info(self.loc.get('creating_launchers'))
        
        if self.system == "windows":
            launchers = {
                "run_gui.bat": "@echo off\npython gui_converter.py\npause",
                "run_cli.bat": "@echo off\npython convert_media.py %*\npause",
                "build_ffmpeg.bat": "@echo off\npython build_ffmpeg.py\npause"
            }
        else:
            launchers = {
                "run_gui.sh": "#!/bin/bash\npython3 gui_converter.py",
                "run_cli.sh": "#!/bin/bash\npython3 convert_media.py \"$@\"",
                "build_ffmpeg.sh": "#!/bin/bash\npython3 build_ffmpeg.py"
            }
        
        for filename, content in launchers.items():
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            
            if not self.system == "windows":
                Path(filename).chmod(0o755)
        
        logger.info(self.loc.get('launchers_created'))
    
    def setup(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info(self.loc.get('starting_setup'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É
        logger.info(self.loc.get('system_check'))
        if self.system == "windows":
            logger.info(self.loc.get('system_windows'))
        elif self.system == "linux":
            logger.info(self.loc.get('system_linux'))
        elif self.system == "darwin":
            logger.info(self.loc.get('system_macos'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        if not self.check_python_version():
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.install_dependencies():
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FFmpeg
        if not self.check_ffmpeg():
            logger.warning(self.loc.get('ffmpeg_not_found'))
            logger.info(self.loc.get('ffmpeg_options'))
            logger.info(self.loc.get('ffmpeg_option1'))
            logger.info(self.loc.get('ffmpeg_option2'))
            logger.info(self.loc.get('ffmpeg_option3'))
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å FFmpeg –¥–ª—è Windows
            if self.system == "windows":
                if self.download_ffmpeg():
                    logger.info(self.loc.get('ffmpeg_installed'))
                    logger.info(self.loc.get('ffmpeg_path', "bin/ffmpeg"))
                    logger.info(self.loc.get('use_wrapper'))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        self.create_sample_files()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
        self.create_launcher_scripts()
        
        logger.info(self.loc.get('setup_complete'))
        logger.info(f"\n{self.loc.get('next_steps')}")
        logger.info(self.loc.get('next_step1'))
        logger.info(self.loc.get('next_step2'))
        logger.info(self.loc.get('next_step3'))
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    installer = UniversalInstaller()
    
    if installer.setup():
        print(f"\n{installer.loc.get('setup_success')}")
        print(installer.loc.get('check_logs'))
    else:
        print(f"\n{installer.loc.get('setup_error')}")
        print(installer.loc.get('check_logs'))

if __name__ == '__main__':
    main() 
#!/usr/bin/env python3
"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ FFmpeg
"""

import os
import sys
import threading
import subprocess
import logging
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import tkinter as tk
from tkinter import filedialog, messagebox
import customtkinter as ctk
from PIL import Image, ImageTk
import json
import time

# –ò–º–ø–æ—Ä—Ç –¥–ª—è drag&drop
try:
    from tkinterdnd2 import TkinterDnD, DND_ALL
except ImportError:
    print("‚ö†Ô∏è tkinterdnd2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Drag&drop –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    TkinterDnD = None
    DND_ALL = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('gui_conversion.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ customtkinter
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å CTk —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π drag&drop
if TkinterDnD:
    class CTk(ctk.CTk, TkinterDnD.DnDWrapper):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.TkdndVersion = TkinterDnD._require(self)
else:
    CTk = ctk.CTk

class FFmpegConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FFmpeg"""
    
    def __init__(self):
        self.supported_formats = self._get_supported_formats()
        self.ffmpeg_path = self._find_ffmpeg()
        
    def _find_ffmpeg(self) -> str:
        """–ü–æ–∏—Å–∫ FFmpeg –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É
        local_paths = [
            "bin/bin/ffmpeg.exe",  # Windows
            "bin/bin/ffmpeg",      # Linux/macOS
            "bin/ffmpeg/bin/ffmpeg.exe",  # –°–∫–∞—á–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            "ffmpeg.bat",          # Windows wrapper
            "ffmpeg.sh"            # Linux/macOS wrapper
        ]
        
        for path in local_paths:
            if Path(path).exists():
                return path
        
        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
        return "ffmpeg"
    
    def _get_supported_formats(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ FFmpeg"""
        formats = {
            'video': ['mp4', 'avi', 'mov', 'mkv', 'wmv', 'flv', 'webm', 'm4v', '3gp', 'ogv'],
            'audio': ['mp3', 'wav', 'aac', 'ogg', 'flac', 'm4a', 'wma', 'opus'],
            'image': ['jpg', 'jpeg', 'png', 'bmp', 'tiff', 'webp', 'gif', 'ico', 'svg']
        }
        return formats
    
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg"""
        try:
            if self.ffmpeg_path.endswith('.bat') or self.ffmpeg_path.endswith('.sh'):
                # –î–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤-–æ–±–µ—Ä—Ç–æ–∫
                result = subprocess.run([self.ffmpeg_path, '-version'], 
                                      capture_output=True, text=True)
            else:
                # –î–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
                result = subprocess.run([self.ffmpeg_path, '-version'], 
                                      capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def get_file_info(self, file_path: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ FFmpeg"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ ffprobe
            ffprobe_path = self.ffmpeg_path.replace('ffmpeg', 'ffprobe')
            if not Path(ffprobe_path).exists():
                ffprobe_path = 'ffprobe'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –≤–µ—Ä—Å–∏—é
            
            cmd = [
                ffprobe_path, '-v', 'quiet', '-print_format', 'json',
                '-show_format', '-show_streams', str(file_path)
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return json.loads(result.stdout)
            else:
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return {}
    
    def convert_file(self, input_path: str, output_path: str, 
                    video_codec: str = None, audio_codec: str = None,
                    quality: int = 80, callback=None) -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg
        
        Args:
            input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            video_codec: –í–∏–¥–µ–æ–∫–æ–¥–µ–∫ (–µ—Å–ª–∏ None - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä)
            audio_codec: –ê—É–¥–∏–æ–∫–æ–¥–µ–∫ (–µ—Å–ª–∏ None - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä)
            quality: –ö–∞—á–µ—Å—Ç–≤–æ (1-100)
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            cmd = [self.ffmpeg_path, '-i', str(input_path)]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            input_ext = Path(input_path).suffix.lower()
            output_ext = Path(output_path).suffix.lower()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
            if input_ext in ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm']:
                if video_codec:
                    cmd.extend(['-c:v', video_codec])
                else:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–¥–µ–∫–∞
                    if output_ext == '.webm':
                        cmd.extend(['-c:v', 'libvpx-vp9'])
                    elif output_ext == '.mp4':
                        cmd.extend(['-c:v', 'libx264'])
                    elif output_ext == '.avi':
                        cmd.extend(['-c:v', 'libxvid'])
                
                if audio_codec:
                    cmd.extend(['-c:a', audio_codec])
                else:
                    if output_ext == '.webm':
                        cmd.extend(['-c:a', 'libopus'])
                    else:
                        cmd.extend(['-c:a', 'aac'])
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                if output_ext == '.webm':
                    cmd.extend(['-crf', '30'])
                else:
                    cmd.extend(['-crf', str(31 - int(quality * 0.31))])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
            elif input_ext in ['.mp3', '.wav', '.aac', '.ogg', '.flac', '.m4a']:
                if audio_codec:
                    cmd.extend(['-c:a', audio_codec])
                else:
                    if output_ext == '.mp3':
                        cmd.extend(['-c:a', 'libmp3lame'])
                    elif output_ext == '.aac':
                        cmd.extend(['-c:a', 'aac'])
                    elif output_ext == '.ogg':
                        cmd.extend(['-c:a', 'libvorbis'])
                    elif output_ext == '.opus':
                        cmd.extend(['-c:a', 'libopus'])
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞—É–¥–∏–æ
                if output_ext == '.mp3':
                    cmd.extend(['-b:a', f'{quality * 3}k'])
                elif output_ext == '.aac':
                    cmd.extend(['-b:a', f'{quality * 2}k'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            elif input_ext in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']:
                if output_ext == '.webp':
                    cmd.extend(['-quality', str(quality)])
                elif output_ext == '.jpg':
                    cmd.extend(['-q:v', str(31 - int(quality * 0.31))])
            
            # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            cmd.extend(['-y', str(output_path)])
            
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            process = subprocess.Popen(
                cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                universal_newlines=True
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            stdout, stderr = process.communicate()
            
            if process.returncode == 0:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {input_path} -> {output_path}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_path}: {str(e)}")
            return False

class ModernConverterGUI:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–æ–≤"""
    
    def __init__(self):
        self.root = CTk()
        self.root.title("üé¨ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        self.root.geometry("1000x700")
        self.root.resizable(True, True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        self.converter = FFmpegConverter()
        self.selected_files = []
        self.output_directory = ""
        self.conversion_running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._check_dependencies()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        self.show_start_screen()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        self._create_start_frame()
        self._create_loading_frame()
        self._create_files_frame()
        self._create_output_frame()
        self._create_progress_frame()
    
    def _create_start_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å drag&drop"""
        
        self.start_frame = ctk.CTkFrame(self.main_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.start_frame, 
            text="üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤",
            font=ctk.CTkFont(size=32, weight="bold")
        )
        title_label.pack(pady=(50, 20))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ctk.CTkLabel(
            self.start_frame,
            text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            font=ctk.CTkFont(size=16),
            text_color="gray"
        )
        subtitle_label.pack(pady=(0, 50))
        
        # Drag&drop –æ–±–ª–∞—Å—Ç—å
        self.drop_area = ctk.CTkFrame(
            self.start_frame,
            fg_color=("gray85", "gray25"),
            corner_radius=15,
            border_width=3,
            border_color=("gray70", "gray30")
        )
        self.drop_area.pack(pady=(0, 50), padx=50, fill="both", expand=True)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç –≤ drop –æ–±–ª–∞—Å—Ç–∏
        self.drop_content = ctk.CTkFrame(self.drop_area, fg_color="transparent")
        self.drop_content.pack(expand=True)
        
        self.drop_icon = ctk.CTkLabel(
            self.drop_content,
            text="üìÅ",
            font=ctk.CTkFont(size=64)
        )
        self.drop_icon.pack(pady=(50, 20))
        
        self.drop_text = ctk.CTkLabel(
            self.drop_content,
            text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            font=ctk.CTkFont(size=18),
            text_color="gray"
        )
        self.drop_text.pack(pady=(0, 50))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        self.drop_area.bind("<Button-1>", self._on_drop_area_click)
        self.drop_area.bind("<Enter>", self._on_drop_area_enter)
        self.drop_area.bind("<Leave>", self._on_drop_area_leave)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.drop_content.bind("<Enter>", self._on_drop_area_enter)
        self.drop_content.bind("<Leave>", self._on_drop_area_leave)
        self.drop_icon.bind("<Enter>", self._on_drop_area_enter)
        self.drop_icon.bind("<Leave>", self._on_drop_area_leave)
        self.drop_text.bind("<Enter>", self._on_drop_area_enter)
        self.drop_text.bind("<Leave>", self._on_drop_area_leave)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag&drop –¥–ª—è drop_area
        if TkinterDnD:
            self.drop_area.drop_target_register(DND_ALL)
            self.drop_area.dnd_bind("<<Drop>>", self._on_drop)
            self.drop_area.dnd_bind("<<DropEnter>>", self._on_drop_enter)
            self.drop_area.dnd_bind("<<DropLeave>>", self._on_drop_leave)
        
        # –°—Ç–∞—Ç—É—Å FFmpeg
        self.ffmpeg_status_label = ctk.CTkLabel(
            self.start_frame,
            text="",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.ffmpeg_status_label.pack(pady=(20, 0))
    
    def _create_loading_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        
        self.loading_frame = ctk.CTkFrame(self.main_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        loading_title = ctk.CTkLabel(
            self.loading_frame,
            text="‚è≥ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        loading_title.pack(pady=(100, 50))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_progress = ctk.CTkProgressBar(
            self.loading_frame,
            mode="indeterminate",
            width=400,
            height=8
        )
        self.loading_progress.pack(pady=(0, 30))
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.loading_status = ctk.CTkLabel(
            self.loading_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...",
            font=ctk.CTkFont(size=16),
            text_color="gray"
        )
        self.loading_status.pack()
    
    def _create_files_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
        
        self.files_frame = ctk.CTkFrame(self.main_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        files_title = ctk.CTkLabel(
            self.files_frame,
            text="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        files_title.pack(pady=(30, 20))
        
        # Scrollable frame –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.files_scroll_frame = ctk.CTkScrollableFrame(
            self.files_frame,
            width=800,
            height=400
        )
        self.files_scroll_frame.pack(pady=(0, 30), padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(self.files_frame)
        buttons_frame.pack(pady=(0, 30))
        
        self.back_btn = ctk.CTkButton(
            buttons_frame,
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            command=self.show_start_screen,
            height=40
        )
        self.back_btn.pack(side="left", padx=(0, 10))
        
        self.convert_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            command=self.show_output_screen,
            height=40,
            fg_color="green"
        )
        self.convert_btn.pack(side="left")
    
    def _create_output_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏"""
        
        self.output_frame = ctk.CTkFrame(self.main_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        output_title = ctk.CTkLabel(
            self.output_frame,
            text="üìÅ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        output_title.pack(pady=(50, 30))
        
        # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
        self.output_path_var = tk.StringVar(value="converted")
        self.output_path_label = ctk.CTkLabel(
            self.output_frame,
            textvariable=self.output_path_var,
            font=ctk.CTkFont(size=16),
            text_color="gray"
        )
        self.output_path_label.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        self.select_output_btn = ctk.CTkButton(
            self.output_frame,
            text="üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
            command=self._select_output_folder,
            height=40
        )
        self.select_output_btn.pack(pady=(0, 50))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(self.output_frame)
        buttons_frame.pack()
        
        self.output_back_btn = ctk.CTkButton(
            buttons_frame,
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            command=self.show_files_screen,
            height=40
        )
        self.output_back_btn.pack(side="left", padx=(0, 10))
        
        self.start_convert_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é",
            command=self.start_conversion,
            height=40,
            fg_color="green"
        )
        self.start_convert_btn.pack(side="left")
    
    def _create_progress_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        
        self.progress_frame = ctk.CTkFrame(self.main_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        progress_title = ctk.CTkLabel(
            self.progress_frame,
            text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        progress_title.pack(pady=(30, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(
            self.progress_frame,
            width=600,
            height=20
        )
        self.progress_bar.pack(pady=(0, 20))
        self.progress_bar.set(0)
        
        # –°—Ç–∞—Ç—É—Å
        self.progress_status = ctk.CTkLabel(
            self.progress_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...",
            font=ctk.CTkFont(size=16),
            text_color="gray"
        )
        self.progress_status.pack(pady=(0, 20))
        
        # –õ–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.log_text = ctk.CTkTextbox(
            self.progress_frame,
            width=800,
            height=300
        )
        self.log_text.pack(pady=(0, 30))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_btn = ctk.CTkButton(
            self.progress_frame,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self._stop_conversion,
            height=40,
            fg_color="orange"
        )
        self.stop_btn.pack()
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if self.converter.check_ffmpeg():
            self.ffmpeg_status_label.configure(
                text="‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                text_color="green"
            )
        else:
            self.ffmpeg_status_label.configure(
                text="‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞",
                text_color="red"
            )
    
    def _on_drop_area_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ drag&drop"""
        self._select_files()
    
    def _on_drop_area_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç—å drag&drop"""
        self.drop_area.configure(
            fg_color=("gray75", "gray35"),
            border_color=("gray60", "gray40")
        )
        self.drop_text.configure(text="–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å")
    
    def _on_drop_area_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ drag&drop"""
        self.drop_area.configure(
            fg_color=("gray85", "gray25"),
            border_color=("gray70", "gray30")
        )
        self.drop_text.configure(text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞")
    
    def _on_drop_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç—å drag&drop —Å —Ñ–∞–π–ª–∞–º–∏"""
        self.drop_area.configure(
            fg_color=("gray75", "gray35"),
            border_color=("gray60", "gray40")
        )
        self.drop_text.configure(text="–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å")
    
    def _on_drop_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ drag&drop —Å —Ñ–∞–π–ª–∞–º–∏"""
        self.drop_area.configure(
            fg_color=("gray85", "gray25"),
            border_color=("gray70", "gray30")
        )
        self.drop_text.configure(text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞")
    
    def _on_drop(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            dropped_data = event.data
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
            if dropped_data.startswith("{") and dropped_data.endswith("}"):
                dropped_data = dropped_data[1:-1]
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã (–º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏)
            files = []
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Ç–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            import re
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            file_paths = re.findall(r'\{[^}]*\}|[^\s]+', dropped_data)
            
            for file_path in file_paths:
                # –£–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                file_path = file_path.strip('{}')
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                file_path = file_path.strip()
                if file_path and os.path.exists(file_path):
                    files.append(file_path)
            
            if files:
                self.selected_files = files
                self.show_loading_screen()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ drag&drop: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
    
    def _select_files(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            filetypes=[
                ("–í—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv *.webm *.mp3 *.wav *.aac *.ogg *.flac *.m4a *.jpg *.jpeg *.png *.bmp *.tiff *.webp"),
                ("–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv *.webm"),
                ("–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã", "*.mp3 *.wav *.aac *.ogg *.flac *.m4a"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tiff *.webp"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if files:
            self.selected_files = list(files)
            self.show_loading_screen()
    
    def show_start_screen(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω"""
        self._hide_all_frames()
        self.start_frame.pack(fill="both", expand=True)
    
    def show_loading_screen(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏"""
        self._hide_all_frames()
        self.loading_frame.pack(fill="both", expand=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_progress.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._analyze_files)
        thread.daemon = True
        thread.start()
    
    def show_files_screen(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
        self._hide_all_frames()
        self.files_frame.pack(fill="both", expand=True)
        self._populate_files_list()
    
    def show_output_screen(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏"""
        self._hide_all_frames()
        self.output_frame.pack(fill="both", expand=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ø–∞–ø–∫—É
        default_output = Path.cwd() / "converted"
        self.output_directory = str(default_output)
        self.output_path_var.set(str(default_output))
    
    def show_progress_screen(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self._hide_all_frames()
        self.progress_frame.pack(fill="both", expand=True)
    
    def _hide_all_frames(self):
        """–°–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ—Ä–µ–π–º—ã"""
        for frame in [self.start_frame, self.loading_frame, self.files_frame, 
                     self.output_frame, self.progress_frame]:
            frame.pack_forget()
    
    def _analyze_files(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
            for i, file_path in enumerate(self.selected_files):
                self.loading_status.configure(text=f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {i+1}/{len(self.selected_files)}...")
                time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ñ–∞–π–ª–æ–≤
            self.root.after(0, self.show_files_screen)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            self.root.after(0, self.show_start_screen)
    
    def _populate_files_list(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.files_scroll_frame.winfo_children():
            widget.destroy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for i, file_path in enumerate(self.selected_files):
            self._create_file_item(file_path, i)
    
    def _create_file_item(self, file_path: str, index: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        file_frame = ctk.CTkFrame(self.files_scroll_frame)
        file_frame.pack(fill="x", pady=5, padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        file_info = ctk.CTkFrame(file_frame, fg_color="transparent")
        file_info.pack(side="left", fill="x", expand=True, padx=10, pady=10)
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        file_name = Path(file_path).name
        name_label = ctk.CTkLabel(
            file_info,
            text=file_name,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        name_label.pack(anchor="w")
        
        # –¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç
        current_ext = Path(file_path).suffix.lower()
        format_label = ctk.CTkLabel(
            file_info,
            text=f"–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: {current_ext}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        format_label.pack(anchor="w")
        
        # –í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        format_frame = ctk.CTkFrame(file_frame, fg_color="transparent")
        format_frame.pack(side="right", padx=10, pady=10)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        file_type = self._get_file_type(current_ext)
        if file_type == "video":
            formats = ["mp4", "webm", "avi", "mkv", "mov"]
        elif file_type == "audio":
            formats = ["mp3", "wav", "aac", "ogg", "opus"]
        elif file_type == "image":
            formats = ["webp", "jpg", "png"]
        else:
            formats = ["mp4", "webm", "avi", "mkv", "mov", "mp3", "wav", "aac", "ogg", "opus", "webp", "jpg", "png"]
        
        format_combo = ctk.CTkComboBox(
            format_frame,
            values=formats,
            width=100
        )
        format_combo.set(formats[0])
        format_combo.pack(side="left", padx=(0, 10))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ combo box –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if not hasattr(self, 'file_formats'):
            self.file_formats = {}
        self.file_formats[index] = format_combo
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = ctk.CTkButton(
            format_frame,
            text="üóëÔ∏è",
            width=30,
            height=30,
            command=lambda: self._remove_file(index)
        )
        delete_btn.pack(side="left")
    
    def _get_file_type(self, extension: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        video_exts = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm']
        audio_exts = ['.mp3', '.wav', '.aac', '.ogg', '.flac', '.m4a']
        image_exts = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']
        
        if extension in video_exts:
            return "video"
        elif extension in audio_exts:
            return "audio"
        elif extension in image_exts:
            return "image"
        else:
            return "unknown"
    
    def _remove_file(self, index: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if 0 <= index < len(self.selected_files):
            self.selected_files.pop(index)
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if hasattr(self, 'file_formats'):
                self.file_formats.clear()
            self._populate_files_list()
    
    def _select_output_folder(self):
        """–í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            initialdir=self.output_directory
        )
        
        if folder:
            self.output_directory = folder
            self.output_path_var.set(folder)
    
    def start_conversion(self):
        """–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        if not self.selected_files:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return
        
        if not self.converter.check_ffmpeg():
            messagebox.showerror("–û—à–∏–±–∫–∞", "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        output_path = Path(self.output_directory)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.show_progress_screen()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._conversion_worker)
        thread.daemon = True
        thread.start()
    
    def _stop_conversion(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        self.conversion_running = False
        self.stop_btn.configure(state="disabled")
        self._log_message("‚èπÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def _conversion_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            total_files = len(self.selected_files)
            successful = 0
            failed = 0
            
            self.conversion_running = True
            self._log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
            self.progress_status.configure(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
            
            for i, input_file in enumerate(self.selected_files):
                if not self.conversion_running:
                    break
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = (i + 1) / total_files
                self.progress_bar.set(progress)
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                input_path = Path(input_file)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç
                if hasattr(self, 'file_formats') and i in self.file_formats:
                    output_format = self.file_formats[i].get()
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                    current_ext = input_path.suffix.lower()
                    file_type = self._get_file_type(current_ext)
                    if file_type == "video":
                        output_format = "mp4"
                    elif file_type == "audio":
                        output_format = "mp3"
                    elif file_type == "image":
                        output_format = "webp"
                    else:
                        output_format = "mp4"
                
                output_path = Path(self.output_directory) / f"{input_path.stem}.{output_format}"
                
                self._log_message(f"üìÅ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: {input_path.name} -> {output_path.name}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                if self.converter.convert_file(str(input_path), str(output_path), quality=80):
                    successful += 1
                    self._log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {input_path.name}")
                else:
                    failed += 1
                    self._log_message(f"‚ùå –û—à–∏–±–∫–∞: {input_path.name}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.progress_bar.set(1.0)
            self._log_message(f"üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self._log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
            self._log_message(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
            
            if failed == 0:
                self.progress_status.configure(text="‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.progress_status.configure(text=f"‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ ({failed})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.root.after(2000, self._show_completion_message)
            
        except Exception as e:
            self._log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.progress_status.configure(text="‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        
        finally:
            self.conversion_running = False
    
    def _show_completion_message(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        from CTkMessagebox import CTkMessagebox
        
        CTkMessagebox(
            title="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            message="–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
            icon="check"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
        self.show_start_screen()
    
    def _log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert("end", f"{message}\n")
        self.log_text.see("end")
        self.root.update()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = ModernConverterGUI()
    app.run()

if __name__ == '__main__':
    main() 
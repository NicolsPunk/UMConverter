#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏ FFmpeg –¥–ª—è Windows
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å–±–æ—Ä–∫–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
"""

import os
import sys
import subprocess
import platform
import zipfile
import requests
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FFmpegDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è FFmpeg"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.bin_dir = Path("bin")
        self.ffmpeg_dir = self.bin_dir / "ffmpeg"
        
    def check_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.system != "windows":
            logger.error("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
            logger.info("üí° –î–ª—è Linux/macOS –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python build_ffmpeg.py")
            return False
        return True
    
    def get_ffmpeg_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è FFmpeg"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –æ—Ç BtbN
        base_url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        if platform.machine().endswith('64'):
            arch = "win64"
        else:
            arch = "win32"
        
        filename = f"ffmpeg-master-latest-{arch}-gpl.zip"
        return f"{base_url}/{filename}"
    
    def download_ffmpeg(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg"""
        try:
            url = self.get_ffmpeg_url()
            filename = url.split('/')[-1]
            download_path = Path(filename)
            
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg —Å {url}")
            logger.info(f"üìÅ –§–∞–π–ª: {filename}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(download_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        if total_size > 0:
                            progress = (downloaded / total_size) * 100
                            logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
            
            logger.info("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return self.extract_ffmpeg(download_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    def extract_ffmpeg(self, zip_path: Path) -> bool:
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ FFmpeg"""
        try:
            logger.info("üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ FFmpeg...")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É bin –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            self.bin_dir.mkdir(exist_ok=True)
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(self.bin_dir)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É —Å FFmpeg
            ffmpeg_folders = list(self.bin_dir.glob("ffmpeg-*"))
            if ffmpeg_folders:
                ffmpeg_folder = ffmpeg_folders[0]
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ ffmpeg
                ffmpeg_folder.rename(self.ffmpeg_dir)
                logger.info(f"‚úÖ FFmpeg —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {self.ffmpeg_dir}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å FFmpeg –≤ –∞—Ä—Ö–∏–≤–µ")
                return False
            
            # –£–¥–∞–ª—è–µ–º zip —Ñ–∞–π–ª
            zip_path.unlink()
            logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
            return False
    
    def create_wrapper_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞-–æ–±–µ—Ä—Ç–∫–∏"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞-–æ–±–µ—Ä—Ç–∫–∏...")
        
        # –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–∞–º
        bin_path = self.ffmpeg_dir / "bin"
        
        if not bin_path.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ bin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º FFmpeg")
            return False
        
        # –°–æ–∑–¥–∞–µ–º batch —Ñ–∞–π–ª
        wrapper_content = f"""@echo off
set FFMPEG_PATH=%~dp0{self.ffmpeg_dir}\\bin
set PATH=%FFMPEG_PATH%;%PATH%
ffmpeg.exe %*
"""
        
        wrapper_path = Path("ffmpeg.bat")
        with open(wrapper_path, 'w', encoding='utf-8') as f:
            f.write(wrapper_content)
        
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç-–æ–±–µ—Ä—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω: {wrapper_path}")
        return True
    
    def test_ffmpeg(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg...")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å ffmpeg
            ffmpeg_exe = self.ffmpeg_dir / "bin" / "ffmpeg.exe"
            if not ffmpeg_exe.exists():
                logger.error("‚ùå ffmpeg.exe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            result = subprocess.run([str(ffmpeg_exe), "-version"], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info("‚úÖ FFmpeg —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def download(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É
        if not self.check_system():
            return False
        
        # –°–∫–∞—á–∏–≤–∞–µ–º FFmpeg
        if not self.download_ffmpeg():
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç-–æ–±–µ—Ä—Ç–∫—É
        if not self.create_wrapper_script():
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FFmpeg
        if not self.test_ffmpeg():
            return False
        
        logger.info("üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {self.ffmpeg_dir}")
        logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ffmpeg.bat –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = FFmpegDownloader()
    
    if downloader.download():
        print("\n‚úÖ FFmpeg —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é FFmpeg –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è FFmpeg")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == '__main__':
    main()
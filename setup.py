#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FFmpeg –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
"""

import os
import sys
import subprocess
import platform
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ProjectSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.project_dir = Path.cwd()
        self.system = platform.system().lower()
        
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        logger.info("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
        
        if sys.version_info < (3, 7):
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
            return False
        
        logger.info(f"‚úÖ Python {sys.version.split()[0]} –Ω–∞–π–¥–µ–Ω")
        return True
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º pip
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                         capture_output=True, check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                         capture_output=True, check=True)
            
            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def setup_ffmpeg(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FFmpeg"""
        logger.info("üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FFmpeg...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg –≤ —Å–∏—Å—Ç–µ–º–µ
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return True
        except FileNotFoundError:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
        local_ffmpeg_paths = [
            "bin/bin/ffmpeg.exe",
            "bin/bin/ffmpeg",
            "ffmpeg.bat",
            "ffmpeg.sh"
        ]
        
        for path in local_ffmpeg_paths:
            if Path(path).exists():
                logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ FFmpeg –Ω–∞–π–¥–µ–Ω–∞: {path}")
                return True
        
        # –ï—Å–ª–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        logger.warning("‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("–í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        logger.info("1. –°–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH")
        logger.info("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python build_ffmpeg.py (–¥–ª—è —Å–±–æ—Ä–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤)")
        logger.info("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
        
        return False
    
    def create_sample_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        examples_dir = Path("examples")
        examples_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
        examples_readme = """# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞

## –ó–∞–ø—É—Å–∫ GUI –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
```bash
python gui_converter.py
```

## –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
```bash
python convert_media.py "–ø–∞–ø–∫–∞_—Å_—Ñ–∞–π–ª–∞–º–∏" -o "–ø–∞–ø–∫–∞_–¥–ª—è_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" -q 80
```

## –°–±–æ—Ä–∫–∞ FFmpeg –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
```bash
python build_ffmpeg.py
```

## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

### –í–∏–¥–µ–æ
- –í—Ö–æ–¥–Ω—ã–µ: MP4, AVI, MOV, MKV, WMV, FLV, WebM
- –í—ã—Ö–æ–¥–Ω—ã–µ: MP4, WebM, AVI, MKV, MOV

### –ê—É–¥–∏–æ
- –í—Ö–æ–¥–Ω—ã–µ: MP3, WAV, AAC, OGG, FLAC, M4A
- –í—ã—Ö–æ–¥–Ω—ã–µ: MP3, WAV, AAC, OGG, OPUS

### –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –í—Ö–æ–¥–Ω—ã–µ: JPG, PNG, BMP, TIFF, WebP
- –í—ã—Ö–æ–¥–Ω—ã–µ: WebP, JPG, PNG
"""
        
        with open(examples_dir / "README.md", "w", encoding="utf-8") as f:
            f.write(examples_readme)
        
        # –°–æ–∑–¥–∞–µ–º .gitignore
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
conversion.log
gui_conversion.log

# Build artifacts
build/
bin/
ffmpeg.bat
ffmpeg.sh

# OS
.DS_Store
Thumbs.db

# Project specific
examples/output/
temp/
"""
        
        with open(".gitignore", "w", encoding="utf-8") as f:
            f.write(gitignore_content)
        
        logger.info("‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
    
    def create_launcher_scripts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...")
        
        if self.system == "windows":
            # –°–æ–∑–¥–∞–µ–º batch —Ñ–∞–π–ª—ã
            launchers = {
                "run_gui.bat": "@echo off\npython gui_converter.py\npause",
                "run_cli.bat": "@echo off\npython convert_media.py %*\npause",
                "build_ffmpeg.bat": "@echo off\npython build_ffmpeg.py\npause"
            }
        else:
            # –°–æ–∑–¥–∞–µ–º shell —Å–∫—Ä–∏–ø—Ç—ã
            launchers = {
                "run_gui.sh": "#!/bin/bash\npython3 gui_converter.py",
                "run_cli.sh": "#!/bin/bash\npython3 convert_media.py \"$@\"",
                "build_ffmpeg.sh": "#!/bin/bash\npython3 build_ffmpeg.py"
            }
        
        for filename, content in launchers.items():
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            
            # –î–µ–ª–∞–µ–º shell —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
            if not self.system == "windows":
                Path(filename).chmod(0o755)
        
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã")
    
    def setup(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        if not self.check_python_version():
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.install_dependencies():
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FFmpeg
        self.setup_ffmpeg()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        self.create_sample_files()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
        self.create_launcher_scripts()
        
        logger.info("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ GUI: python gui_converter.py")
        logger.info("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI: python convert_media.py --help")
        logger.info("3. –ï—Å–ª–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = ProjectSetup()
    
    if setup.setup():
        print("\n‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == '__main__':
    main() 